(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{390:function(r,t,e){"use strict";e.r(t);var o=e(28),_=Object(o.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"言叶之庭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#言叶之庭"}},[r._v("#")]),r._v(" 言叶之庭")]),r._v(" "),e("p",[r._v("这里主要是我个人服务器部署，以及搭建动态网站的点点滴滴记录")]),r._v(" "),e("p",[r._v("大部分涉及到的是运维相关知识~")]),r._v(" "),e("h4",{attrs:{id:"服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器"}},[r._v("#")]),r._v(" 服务器")]),r._v(" "),e("p",[r._v("尝试的操作系统主要为 ubuntu 18.04 LTS，")]),r._v(" "),e("p",[r._v("ubuntu操作较为简便，且可以安装图形化版本，适合个人")]),r._v(" "),e("p",[r._v("CentOS（redhat社区版）会更适合做大服务器  "),e("a",{attrs:{href:"https://www.centos.org/centos-linux/",target:"_blank",rel:"noopener noreferrer"}},[r._v("centOS下载"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("这里不多做解释相关Linux相关知识")]),r._v(" "),e("h4",{attrs:{id:"运维"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运维"}},[r._v("#")]),r._v(" 运维")]),r._v(" "),e("p",[r._v("推荐 "),e("a",{attrs:{href:"https://www.bt.cn/",target:"_blank",rel:"noopener noreferrer"}},[r._v("宝塔面板"),e("OutboundLink")],1)]),r._v(" "),e("h2",{attrs:{id:"更多"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更多"}},[r._v("#")]),r._v(" 更多")]),r._v(" "),e("p",[r._v("外链："),e("a",{attrs:{href:"https://www.zhihu.com/question/20463581/answer/51381121",target:"_blank",rel:"noopener noreferrer"}},[r._v("如何搭建个人独立博客"),e("OutboundLink")],1)]),r._v(" "),e("h5",{attrs:{id:"推荐一些我遇到的觉得好看的个人博客网站"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推荐一些我遇到的觉得好看的个人博客网站"}},[r._v("#")]),r._v(" 推荐一些我遇到的觉得好看的个人博客网站：")]),r._v(" "),e("p",[r._v("MRJU ： https://mrju.cn/")]),r._v(" "),e("p",[r._v("蔡 ：http://aka.cjzblog.top/")]),r._v(" "),e("p",[r._v("柏荧的博客：http://qiubaiying.vip/")]),r._v(" "),e("h2",{attrs:{id:"关于docker的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于docker的使用"}},[r._v("#")]),r._v(" 关于Docker的使用")]),r._v(" "),e("h3",{attrs:{id:"从应用架构角度理解docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从应用架构角度理解docker"}},[r._v("#")]),r._v(" 从应用架构角度理解Docker")]),r._v(" "),e("p",[r._v("刚开始，你只需要写一个Node.js程序，挂载一个静态网站；然后，你做了一个用户账号系统，这时需要数据库了，比如说MySQL; 后来，为了提升性能，你引入了Memcached缓存；终于有一天，你决定把前后端分离，这样可以提高开发效率；当用户越来越多，你又不得不使用Nginx做反向代理; 对了，随着功能越来越多，你的应用依赖也会越来越多…总之，你的应用架构只会越来越复杂。不同的组件的安装，配置与运行步骤各不相同，于是你不得不写一个很长的文档给新同事，只为了让他搭建一个"),e("strong",[r._v("开发环境")]),r._v("。")]),r._v(" "),e("p",[r._v("使用Docker的话，你可以为不同的组件逐一编写Dockerfile，分别构建镜像，然后运行在各个容器中。这样做，将复杂的架构统一了，所有组件的安装和运行步骤统一为几个简单的命令:")]),r._v(" "),e("ul",[e("li",[r._v("构建Docker镜像: docker build")]),r._v(" "),e("li",[r._v("上传Docker镜像: docker push")]),r._v(" "),e("li",[r._v("下载Docker镜像: docker pull")]),r._v(" "),e("li",[r._v("运行Docker容器: docker run")])]),r._v(" "),e("h3",{attrs:{id:"从应用部署角度理解docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从应用部署角度理解docker"}},[r._v("#")]),r._v(" 从应用部署角度理解Docker")]),r._v(" "),e("p",[r._v("通常，你会有"),e("strong",[r._v("开发")]),r._v("，"),e("strong",[r._v("测试")]),r._v("和"),e("strong",[r._v("生产")]),r._v("服务器，对于某些应用，还会需要进行"),e("strong",[r._v("构建")]),r._v("。不同步骤的依赖会有一些不同，并且在不同的服务器上执行。如果手动地在不同的服务器上安装依赖，是件很麻烦的事情。比如说，当你需要为Node.js应用添加一个新的npm模块，或者升级一下Node.js，是不是得重复操作很多次？友情提示一下，手动敲命令是极易出错的，有些失误会导致致命的后果（参考最近Gitlab误删数据库与AWS的S3故障）。")]),r._v(" "),e("p",[r._v("如果使用Docker的话，"),e("strong",[r._v("开发")]),r._v("、"),e("strong",[r._v("构建")]),r._v("、"),e("strong",[r._v("测试")]),r._v("、"),e("strong",[r._v("生产")]),r._v("将全部在Docker容器中执行，你需要为不同步骤编写不同的Dockerfile。当依赖变化时，仅需要稍微修改Dockerfile即可。结合构建工具"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//jenkins.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Jenkins"),e("OutboundLink")],1),r._v("，就可以将整个部署流程自动化。")]),r._v(" "),e("p",[r._v("另一方面，Dockerfile将Docker镜像描述得非常精准，能够保证很强的一致性。比如，操作系统的版本，Node.js的版本，NPM模块的版本等。这就意味着，在本地开发环境运行成功的镜像，在"),e("strong",[r._v("构建")]),r._v("、"),e("strong",[r._v("测试")]),r._v("、"),e("strong",[r._v("生产")]),r._v("环境中也没有问题。还有，不同的Docker容器是依赖于不同的Docker镜像，这样他们互不干扰。比如，两个Node.js应用可以分别使用不同版本的Node.js。")]),r._v(" "),e("h3",{attrs:{id:"从集群管理角度理解docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从集群管理角度理解docker"}},[r._v("#")]),r._v(" 从集群管理角度理解Docker")]),r._v(" "),e("p",[r._v("架构规模越来越大的时候，你有必要引入集群了。这就意味着，服务器由1台变成了多台，同一个应用需要运行多个备份来分担负载。当然，你可以手动对集群的功能进行划分: Nginx服务器，Node.js服务器，MySQL服务器，测试服务器，生产服务器…这样做的好处是简单粗暴；也可以说财大气粗，因为资源闲置会非常严重。还有一点，每次新增节点的时候，你就不得不花大量时间进行安装与配置，这其实是一种低效的重复劳动。")]),r._v(" "),e("p",[r._v("下载Docker镜像之后，Docker容器可以运行在集群的任何一个节点。一方面，各个组件可以共享主机，且互不干扰；另一方面，也不需要在集群的节点上安装和配置任何组件。至于整个Docker集群的管理，业界有很多成熟的解决方案，例如"),e("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//mesos.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Mesos"),e("OutboundLink")],1),r._v("，"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Kubernetes"),e("OutboundLink")],1),r._v("与"),e("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/docker/swarm",target:"_blank",rel:"noopener noreferrer"}},[r._v("Docker Swarm"),e("OutboundLink")],1),r._v("。这些集群系统提供了"),e("strong",[r._v("调度")]),r._v("，"),e("strong",[r._v("服务发现")]),r._v("，"),e("strong",[r._v("负载均衡")]),r._v("等功能，让整个集群变成一个整体。")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://blog.fundebug.com/2017/03/27/nodejs-docker/",target:"_blank",rel:"noopener noreferrer"}},[r._v("参考原文"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=_.exports}}]);