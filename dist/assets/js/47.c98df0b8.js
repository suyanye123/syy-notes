(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{434:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),a("h3",{attrs:{id:"组件间通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件间通信"}},[t._v("#")]),t._v(" 组件间通信")]),t._v(" "),a("p",[t._v("1.通过props传递，只能一层一层传递")]),t._v(" "),a("p",[t._v("2.消息订阅和发布机制")]),t._v(" "),a("p",[t._v("通过工具库PubSubJS来实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//发布消息")]),t._v("\nPubsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pubulish")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'search'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("searchName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//订阅消息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tPubsub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'search'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("searchName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指定了新的search，回调函数发起请求")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("3.redux")]),t._v(" "),a("p",[t._v("一个存放数据的容器")]),t._v(" "),a("p",[t._v("redux三大核心")]),t._v(" "),a("p",[t._v("1.单一数据源store")]),t._v(" "),a("p",[t._v("整个应用的state被存储在一棵object tree中，并且这个object  tree只存在于唯一一个store中")]),t._v(" "),a("p",[t._v("通过creatStore 来构建 store")]),t._v(" "),a("p",[t._v("通过 subscribe来注册监听")]),t._v(" "),a("p",[t._v("2.state是只读的，唯一改变state的方法就是触发action")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("store.dispatch({type:'COMPLETE_TODO',index:1})\n")])])]),a("p",[t._v("3.使用纯函数reducer来执行修改")]),t._v(" "),a("p",[t._v("为了描述action如何改变state tree，你需要去编写reducers")]),t._v(" "),a("p",[t._v("reducers只是一些纯函数，接受先前的state和action，并返回新的state")]),t._v(" "),a("p",[t._v("响应发送过来的action，函数接受两个参数，一个是初始化state，一个是发送过来的action，必须有return返回值")])])}),[],!1,null,null,null);s.default=e.exports}}]);